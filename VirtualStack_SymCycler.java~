import ij.*;
import ij.process.*;
import ij.gui.*;
import ij.plugin.*;
import ij.plugin.frame.*;

import ij.io.FileInfo;
import ij.io.Opener;
import ij.ImagePlus;

import java.util.*;
import java.io.*;
import java.awt.event.*;

public class VirtualStack_SymCycler implements PlugIn, KeyListener, ImageListener {

	private Opener op;
	private ImagePlus imp;

	private FileInfo fi;
	private String dir;
	private String name;
	private String fpath;

	private File dirobj;
	private File filenames[];
	private int currindex = -1;	// for error checking, should be >= 0 when run

	private String lnk1;
	private String lnk2;
	private String currlnk;
	private int symdex = 0;
	private final int SYMFIRST = 0;
	private final int SYMSECOND = 1;

	private ImageWindow win;
	private ImageCanvas canvas;

	public void run(String arg) {

		// Open file from dialog box and store directory path
		op = new Opener();
		imp = op.openImage(null);

		// store directory path
		fi = imp.getOriginalFileInfo();
		dir = fi.directory;	// directory with images
		name = fi.fileName;	// file name
		fpath = dir + name;	// path to file

		// store all file names in directory
		dirobj = new File(dir);
		filenames = dirobj.listFiles();
		Arrays.sort(filenames);
		
		// get position of current open image in filelist
		for (int i = 0; i < filenames.length; i++) {
			if (filenames[i].getName().equals(name)) {
				currindex = i;			
			}
		}

		// error checking
		if (currindex < 0) {
			IJ.log("Filename not detected in filenames[]!");
		}

		// Create 2 symlinks
		lnk1 = dir+"sym1";
		lnk2 = dir+"sym2";
		currlnk = lnk1;
		
		// Associate loaded image with symlinks
		try {
			java.lang.Runtime rt = java.lang.Runtime.getRuntime();
			java.lang.Process p = rt.exec(new String[]{
				"bash","-c", 
				"ln -s "+fpath+" "+lnk1+"; ln -s "+fpath+" "+lnk2+"; ls "+dir+"> testlog.txt"});
			p.waitFor();
		}
		catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
			IJ.showMessage("exception", e.getMessage());
		}

		// Load image into window
		imp.show();

		// Initialize the KeyListener using the open image
		win = imp.getWindow();
		canvas = win.getCanvas();

		win.removeKeyListener(IJ.getInstance());
		canvas.removeKeyListener(IJ.getInstance());
		win.addKeyListener(this);
		canvas.addKeyListener(this);
		ImagePlus.addImageListener(this);
	}

	// Load prev/next image based on arrow key press
	public void keyPressed(KeyEvent e) {

		int keyCode = e.getKeyCode();

		switch(keyCode) {

			// left arrow - go to previous image in folder
			case KeyEvent.VK_LEFT:

				// set new image to load as prev
				currindex -= 1;

				// loop to end of file list
				if (currindex < 0) {
					currindex = filenames.length-1;				
				}

				break;

			// right arrow - go to next image in folder
			case KeyEvent.VK_RIGHT:

				// set new image to load as next
				currindex += 1;

				// loop to front of list
				if (currindex >= filenames.length) {
					currindex = 0;
				}

				break;
		}

		// get path to next/prev file
		String newname = filenames[currindex].getName();
		String newfpath = dir + newname;

		// update symlink to new usage
		symdex = (symdex+1) % 2;	// alternate between 0 and 1

		// reassign symlink being used
		switch(symdex) {
			// sym1
			case SYMFIRST:
				currlnk = lnk1;
				break;
			// sym2
			case SYMSECOND:
				currlnk = lnk2;
				break;
		}	
	
		// change symlink path
		try {
			java.lang.Runtime rtsym = java.lang.Runtime.getRuntime();
			java.lang.Process psym = rtsym.exec(new String[]{
				"bash","-c", 
				"ln -nsf "+newfpath+" "+currlnk});
			psym.waitFor();
		}
		catch (Exception exc) {
			System.err.println("Caught Exception: " + exc.getMessage());
			IJ.showMessage("exception", exc.getMessage());
		}

		// load image into window
		ImagePlus newimp = op.openImage(currlnk);
		imp.setImage(newimp);
		imp.setTitle(newname);
		//imp.updateImage();
	}

	// Upon closing, delete symlinks
	public void imageClosed(ImagePlus imp) {
		if (win!=null)
		    win.removeKeyListener(this);
		if (canvas!=null)
		    canvas.removeKeyListener(this);
		ImagePlus.removeImageListener(this);

		try {
			java.lang.Runtime rtclose = java.lang.Runtime.getRuntime();
			java.lang.Process pclose = rtclose.exec(new String[]{
				"bash", "-c",
				"rm "+lnk1+"; rm "+lnk2});
			pclose.waitFor();			
		}
		catch (Exception e) {
			System.err.println("Caught Exception: " + e.getMessage());
			IJ.showMessage("exception", e.getMessage());
		}
	}

	public void keyReleased(KeyEvent e) {}
	public void keyTyped(KeyEvent e) {}
    	public void imageOpened(ImagePlus imp) {}
    	public void imageUpdated(ImagePlus imp) {}
}
